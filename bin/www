/**
 * Module dependencies.
 */
var app = require("../app");
const Post = require('../models/post.js')
const User = require('../models/user.js')
var debug = require("debug")("acebook:server");
var http = require("http");
var mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// var port = 3000

/**
 * Connect to MongoDB
 **/

var mongoDbUrl = process.env.MONGODB_URL || "mongodb://127.0.0.1/acebook";
mongoose.connect(mongoDbUrl, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(()=>console.log('connected'))
.catch(e=>console.log(e));

var db = mongoose.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:"));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Now listening on " + bind);
  debug("Listening on " + bind);
}

// Websocket Events

const io = require('socket.io')(server, { cors: { origin: "*" }})

io.on('connection', (socket) => {
  console.log('socket connected')
  socket.emit('handshake', 'hello client')

  socket.on('answer', (msg) => {
    console.log(msg)
  })

  socket.on('newLike', (params) => {
    
    Post.findOne(
      { _id: params.postId }
    ).then((entry) => {
      if (entry.likes.includes(params.userId)) {

        console.log(`user ${params.userId}`)
        console.log(`unliked post ${params.postId}`)

        Post.updateOne(
          { _id: params.postId },
          { $pull: { likes: params.userId} }
        ).then(() => {
          socket.emit('remove like', params.postId)
        })

      } else {

        console.log(`user ${params.userId}`)
        console.log(`liked post ${params.postId}`)

        Post.updateOne(
          { _id: params.postId },
          { $push: { likes: params.userId} }
        ).then(() => {
          socket.emit('add like', params.postId)
        })
      }
    })
  })

  socket.on('newPostAdded', (params) => {
    console.log(`user ${params.author}`)
    console.log(`posted ${params.message}`)

    User.findOne(
      {_id: params.author}
    ).then((res) => {
      const authFName = res.firstName
      const authSName = res.surname
      console.log(`found user ${authFName} ${authSName}`)
      const post = new Post(
        {
          message: params.message,
          authorFirstName: authFName,
          authorSurname: authSName,
          userId: params.author,
        }
      ).save(

      ).then((res) => {
        socket.emit('addNewPost', {post: res})
      })
    })
  })
})
